Firebase Realtime Database Security Rules for Production

=====================================
FIREBASE REALTIME DATABASE RULES
=====================================

Copy and paste these rules into your Firebase Console:
Database > Rules section

{
  "rules": {
    ".read": "auth != null || true",  // Allow public read for now, restrict later
    ".write": "auth != null",         // Require authentication for writes
    
    "blogs": {
      ".indexOn": ["status", "created_at", "slug"],
      "$blogId": {
        ".read": "data.child('status').val() == 'published' || auth != null",
        ".write": "auth != null && auth.token.admin == true"
      }
    },
    
    "testimonials": {
      ".indexOn": ["status", "featured", "created_at"],
      "$testimonialId": {
        ".read": "data.child('status').val() == 'approved' || auth != null",
        ".write": "auth != null && auth.token.admin == true"
      }
    },
    
    "submissions": {
      ".read": "auth != null && auth.token.admin == true",
      ".write": "true",  // Allow public form submissions
      "$submissionId": {
        ".write": "!data.exists()"  // Only allow new submissions, no updates
      }
    }
  }
}

=====================================
PRODUCTION SECURITY RECOMMENDATIONS
=====================================

1. **Enable Authentication**
   - Go to Firebase Console > Authentication
   - Enable Email/Password or Google Sign-In
   - Set up admin users with custom claims

2. **Restrict Public Access**
   - Change ".read": "true" to more restrictive rules
   - Only allow public read for published content

3. **Set Up Admin Authentication**
   - Add custom claims to admin users:
   ```javascript
   admin.auth().setCustomUserClaims(uid, {admin: true});
   ```

4. **Monitor Database Usage**
   - Set up billing alerts
   - Monitor read/write operations
   - Enable backup rules

5. **Enable CORS for Domain**
   - Add your domain to authorized domains
   - Configure CORS settings

6. **Data Validation Rules**
   - Add validation for required fields
   - Set character limits for content
   - Validate data types

Example Restrictive Rules for Full Production:

{
  "rules": {
    "blogs": {
      ".read": "query.orderByChild == 'status' && query.equalTo == 'published'",
      ".write": "auth != null && auth.token.admin == true",
      "$blogId": {
        ".validate": "newData.hasChildren(['title', 'content', 'status'])"
      }
    },
    "testimonials": {
      ".read": "query.orderByChild == 'status' && query.equalTo == 'approved'",
      ".write": "auth != null && auth.token.admin == true"
    },
    "submissions": {
      ".read": "false",
      ".write": "auth == null",  // Only anonymous users can submit
      "$submissionId": {
        ".write": "!data.exists() && newData.hasChildren(['email', 'business_name'])"
      }
    }
  }
}

=====================================
SETUP INSTRUCTIONS
=====================================

1. Go to Firebase Console: https://console.firebase.google.com/
2. Select your project: aimpact-22bcb
3. Go to "Realtime Database" in left menu
4. Click on "Rules" tab
5. Replace existing rules with the rules above
6. Click "Publish" to save changes

Note: Start with the first (more permissive) rules, then gradually tighten security as you implement authentication.