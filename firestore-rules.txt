Firestore Security Rules for Production

=====================================
FIRESTORE SECURITY RULES
=====================================

Copy and paste these rules into your Firebase Console:
Firestore Database > Rules section

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Blogs collection
    match /blogs/{blogId} {
      // Allow public read for published blogs
      allow read: if resource.data.status == 'published' || 
                     (request.auth != null && request.auth.token.admin == true);
      
      // Only authenticated admins can write
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Testimonials collection
    match /testimonials/{testimonialId} {
      // Allow public read for approved testimonials
      allow read: if resource.data.status == 'approved' || 
                     (request.auth != null && request.auth.token.admin == true);
      
      // Only authenticated admins can write
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Submissions collection (contact forms)
    match /submissions/{submissionId} {
      // Only admins can read submissions
      allow read: if request.auth != null && request.auth.token.admin == true;
      
      // Anyone can create submissions, but only if document doesn't exist
      allow create: if true;
      
      // No updates or deletes allowed for submissions
      allow update, delete: if false;
    }
    
    // Admin users collection (for authentication)
    match /admin_users/{userId} {
      // Only the user themselves or other admins can read
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || request.auth.token.admin == true);
      
      // Only existing admins can create/update admin users
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

=====================================
DEVELOPMENT/TESTING RULES (TEMPORARY)
=====================================

For initial setup and testing, use these more permissive rules:

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Blogs - public read, admin write
    match /blogs/{blogId} {
      allow read: if true;  // Public read for testing
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Testimonials - public read, admin write
    match /testimonials/{testimonialId} {
      allow read: if true;  // Public read for testing
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Submissions - anyone can create
    match /submissions/{submissionId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow create: if true;
      allow update, delete: if false;
    }
    
    // Admin users
    match /admin_users/{userId} {
      allow read, write: if request.auth != null;
    }
  }
}

=====================================
SETUP INSTRUCTIONS
=====================================

1. Go to Firebase Console: https://console.firebase.google.com/
2. Select your project: aimpact-22bcb
3. Go to "Firestore Database" in left menu
4. Click on "Rules" tab
5. Replace existing rules with the DEVELOPMENT rules above (for testing)
6. Click "Publish" to save changes
7. Later, switch to PRODUCTION rules when authentication is fully set up

=====================================
AUTHENTICATION SETUP
=====================================

1. Enable Authentication:
   - Go to Firebase Console > Authentication
   - Enable Email/Password sign-in method

2. Create Admin Users:
   - Use Firebase Admin SDK or Console to create users
   - Set custom claims for admin users:
   
   ```javascript
   // In Firebase Functions or Admin SDK
   admin.auth().setCustomUserClaims(uid, {admin: true});
   ```

3. Update Admin Login System:
   - Replace MySQL admin authentication with Firebase Auth
   - Use Firebase JavaScript SDK in admin login page
   - Verify admin tokens on server-side

=====================================
FIRESTORE DATA STRUCTURE
=====================================

blogs/{blogId}
- title: string
- slug: string
- content: string
- status: string ('draft' | 'published')
- author: string
- image_url: string
- created_at: timestamp
- updated_at: timestamp
- views: number

testimonials/{testimonialId}
- client_name: string
- company_name: string
- position: string
- content: string
- rating: number (1-5)
- status: string ('pending' | 'approved')
- featured: boolean
- image_url: string
- created_at: timestamp
- approved_at: timestamp

submissions/{submissionId}
- tasks: string
- ai_experience: string
- timeline: string
- budget: string
- business_name: string
- contact_name: string
- email: string
- phone: string
- created_at: timestamp

admin_users/{userId}
- email: string
- display_name: string
- role: string
- created_at: timestamp
- last_login: timestamp